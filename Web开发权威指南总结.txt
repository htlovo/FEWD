前言


四个项目
Ottergram	图片浏览应用。
CoffeeRun	咖啡订购表单及清单。
Dhattrbox	聊天客户端。
Tracker		收录珍稀动物。

用到的工具
Atom文本编辑器和一些方便代码编写的插件
文档资源，比如Mozilla Developer Network（MDN）
命令行，使用OS X终端应用或者Windows命令行
browser-sync
Google Chrome开发者工具
normalize.css
Bootstrap
jQuery以及库函数，比如crypto-js和moment
Node.js、Node包管理工具（Node package manager, npm）以及nodemon
WebSockets和wscat模块
Babel、Babelify、Browserify以及Watchify
Ember.js和插件，比如Ember CLI、Ember Inspector、Ember CLI Mirage以及Handlebars
Bower
Hombrew
Watchman



第一章

第二章

browser-sync start --server --files "*.html, stylesheets/*.css, scripts/*.js"
browser-sync start --server --browser "Firefox" --files "*.html, stylesheets/*.css, scripts/*.js"
browser-sync start --server --browser "Chrome" --files "*.html, stylesheets/*.css, scripts/*.js"

搜索"favicon generator"制作favicon.ico


第三章

css声明字体：
@font-face {
	font-family: 'lakeshore';
	src: url('fonts/LAKESHOR-webfont.eot');
	src: url('fonts/LAKESHOR-webfont.eot?#iefix') format('embedded-opentype'),
			 url('fonts/LAKESHOR-webfont.woff') format('woff'),
	 		 url('fonts/LAKESHOR-webfont.ttf') format('truetype'),
	 		 url('fonts/LAKESHOR-webfont.svg#lakeshore') format('svg');
	font-weight: normal;
	font-style: normal;
}

第四章

弹性盒布局flex
在创建第一个flexbox属性前，先将<html>和<body>的高度设置为100%。


flex容器
display: flex;	创建flex容器
flex-direction: column;	主轴设为垂直方向
justify-content: space-between;	每个flex项目间隙相等，其他值还有flex-start,flex-end,center,space-around

flex项目
flex: 0 1 auto;	依次设置flex-grow,flex-shrink,flex-basis：无需进行拉伸，如有必要将会收缩，自动计算大小
order: 2;	源顺序设为2，默认为0，大的在小的后边

第七章

通过document.body属性访问<body>元素
通过 classList.add(类名字符串) 添加类,通过 classList.remove(类名字符串) 来删除添加进去的类名。



第八章 模块、对象和方法

立即调用的函数表达式IIFE：
(function () {
	'use strict';
	//放置要运行的代码
})();


第十章 使用JavaScript处理表单

当使用jQuery的$函数来选择元素时，它并不会像document.querySelectorAll一样返回DOM元素的引用，而是返回单个对象，该对象中会包含对所选元素的引用。这个对象同时具有操作引用集合的特殊方法，被称为“jQuery封装集合”。
如果未查到任何元素，jQuery将会返回空，不会抛出一个异常。因此需要手动检查。

第十一章 从数据到DOM

CheckList模块3个方法
第1个负责创建一个清单项，包括复选框和描述文本。可视为table中的一行。
第2个会从table中移除一行。
第3个会为单击事件添加一个监听器，从而让代码知道何时需要移除一行。

第十二章 表单校验

无须为布尔属性赋值。如果元素的某个属性是布尔属性，那么无论为它赋予什么值，浏览器均会认为该值为true。
(function (window) {
	'use strict';

	var App = window.App || {};
	
	var Validation = {  };

	App.Validation = Validation;
	
	window.App = App;
})(window);

(function (window) {
	'use strict';

	var App = window.App;

	var Validation = App.Validation;
})(window);

使用event.targe中的setCustomValidity方法将其标记为无效